# deployed by ooni-api .deb package
log_format ooniapi_fmt '"$request" $status';
#server {
#  listen 80;
#  listen [::]:80;
#  server_name _;
#  access_log syslog:server=unix:/dev/log,tag=ooniapi,severity=info ooniapi_fmt;
#  location / {
#    proxy_pass http://127.0.0.1:8000;
#    proxy_set_header Host $host;
#    proxy_set_header X-Real-IP $remote_addr;
#  }
#}

# Use 2-level cache, 20MB of RAM + 5GB on disk,
proxy_cache_path /var/cache/nginx/ooni-api levels=1:2 keys_zone=apicache:100M
                max_size=5g inactive=24h use_temp_path=off;

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name _;
  access_log syslog:server=unix:/dev/log,tag=ooniapi,severity=info ooniapi_fmt;
  gzip on;

  # TODO: we could use different client_max_body_size and SSL configurations for probe service paths
  # and everyhing else
  client_max_body_size 200M; # for measurement POST

  ssl_certificate /etc/letsencrypt/live/ams-pg.ooni.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/ams-pg.ooni.org/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/ams-pg.ooni.org/chain.pem; # for ssl_stapling_verify

  # Use the intermediate configuration to support legacy probes
  # https://ssl-config.mozilla.org/#server=nginx&version=1.14.2&config=intermediate&openssl=1.1.1d&guideline=5.6
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
  ssl_session_tickets off;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  # HSTS (ngx_http_headers_module is required) (63072000 seconds)
  add_header Strict-Transport-Security "max-age=63072000" always;

  # OCSP stapling
  ssl_stapling on;
  ssl_stapling_verify on;

  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

  resolver 127.0.0.1;

  # Registry
  # Should match:
  # - /api/v1/login
  # - /api/v1/register
  # - /api/v1/update
  location ~^/api/v1/(login|register|update) {
      proxy_http_version 1.1;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;

      proxy_pass https://registry.ooni.io:443;
  }

  # Orchestrate
  # Should match:
  # - /api/v1/test-list
  location ~^/api/v1/(test-list|urls) {
      proxy_http_version 1.1;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;

      proxy_pass https://orchestrate.ooni.io:443;
  }

  # Web Connectivity Test Helper
  # Should match:
  # - /
  # - /status
  #
  # The fact that it responds to / means that we may have to differentiate
  # via the Host record.
  # TODO We should check if clients will respect a suffix added to by the
  # bouncer in the returned field, otherwise new clients should use another
  # form
  location ~^/web-connectivity/(status) {
      proxy_http_version 1.1;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;

      proxy_pass https://wcth.ooni.io;
  }

  location /whoami {
      return 200 "ams-pg.ooni.org";
  }

  # new API
  location / {
    proxy_pass http://127.0.0.1:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_cache apicache;
    proxy_cache_min_uses 1;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 30;
    proxy_cache_lock_age 30;
    proxy_cache_use_stale error timeout invalid_header updating;
    proxy_cache_methods HEAD GET;
    # Cache only 200, 301, and 302 by default and for very short.
    # Overridden by the API using the Expires header
    proxy_cache_valid 200 301 302 10s;
    proxy_cache_valid any 0;
    add_header x-cache-status $upstream_cache_status;
    add_header X-Cache-Status $upstream_cache_status;
  }

}
