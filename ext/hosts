#!/usr/bin/env python2
#
# Build hosts-like file with data from external inventory (DNS, droplets API)

import json
import sys
import re
import socket
from  subprocess import check_output
import xml.etree.ElementTree as ElementTree

dns = {}
gh = {}
ptr = {}
state = {}

ns = {'NC': 'http://api.namecheap.com/xml.response'}
for domain in ('openobservatory.org', 'ooni.io', 'ooni.nu'):
    tree = ElementTree.parse(domain + '.xml')
    for el in tree.findall('./NC:CommandResponse/NC:DomainDNSGetHostsResult/NC:host', ns):
        if el.get('Type') == 'A':
            name = el.get('Name')
            name = (name + '.' + domain) if name != '@' else domain
            dns.setdefault(el.get('Address'), set()).add(name)

droplets = json.load(open('gh-droplets.json'))
for vm in droplets['droplets']:
    for net in vm['networks']['v4']: # no IPv6 support there yet
        gh[net['ip_address']] = vm['name']

inventory = {}
with open('../ansible/inventory') as fd:
    for fqdn in fd:
        fqdn = fqdn.strip()
        if not fqdn:
            continue
        fqdn = fqdn.split()[0]
        if not re.match('^[-0-9a-z\.]+$', fqdn) or '.' not in fqdn:
            continue
        try:
            ip = [_[4][0] for _ in socket.getaddrinfo(fqdn, 22, socket.AF_INET, socket.SOCK_STREAM)]
        except Exception:
            print >>sys.stderr, 'FQDN:', fqdn
            raise
        if len(ip) != 1:
            raise RuntimeError('ansible/inventory with ambiguous FQDN', fqdn, ip)
        inventory[ip[0]] = fqdn

all_ips = dns.viewkeys() | gh.viewkeys() | inventory.viewkeys()

nmap = check_output(['sudo', 'nmap', '-v', '-sn', '-oX', '-'] + list(all_ips))
nmap = ElementTree.fromstring(nmap)
for host in nmap.findall('host'):
    ip = host.find('address[@addrtype="ipv4"]').get('addr')
    try:
        state[ip] = host.find('status').get('state')
    except Exception:
        pass
    try:
        ptr[ip] = host.find('hostnames/hostname[@type="PTR"]').get('name')
    except Exception:
        pass

# nmap sometimes misses some PTR responses, maybe it's too aggressive for DNS recursor, who knows...
for ip in all_ips:
    if ip not in ptr:
        try:
            ptr[ip] = socket.gethostbyaddr(ip)[0]
        except Exception:
            pass

def maxlen(d):
    return str(max(map(len, d.values())))
def keyip(s):
    return tuple(map(int, s.split('.')))

fmt = '{:15} {:'+maxlen(ptr)+'} {:4} {:5} {:'+maxlen(gh)+'} {}'
for ip in sorted(all_ips, key=keyip):
    print fmt.format(ip, ptr.get(ip, 'NO-PTR'), state.get(ip, '?'), 'ANSBL' if ip in inventory else '???', gh.get(ip, 'NOT-GH'), ' '.join(sorted(dns.get(ip, []))))
