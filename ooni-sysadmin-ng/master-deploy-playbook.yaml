# sketching this out for now.
# basic idea is:
#   1) this script takes as input the role (ooni-{backend,api,etc.})
#      and other required parameters (credentials, files to analyze, etc.).
#      i would consider it very important that this script tells you about
#      missing parameters and doesn't move on without them.
#   2) this script runs one of our ec2 plays (we have a few
#      scattered around) to provision a machine.
#   3) this script copies to the new machine the directory of shell
#      scripts and templates appropriate to the role.
#   4) this script runs the install-whatever.sh on the remote host.
#
# advantages: the user running the deploy gets the benefits of
#   ansible (agentless, can hit a few machines at once, pass
#   environment variables to remote scripts easily) *and* the
#   benefits of plain-old-shell-script (more readable, easier
#   to debug, fewer moving parts, can run bits of them by hand
#   without ansible, other people can use them without ansible).
#
# it should look something like this (i'm not looking up the syntax right now)

---
- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Provision EC2 instance
      ec2:
        key_name: ooni-pipeline
        instance_tags: role={{ role }}
        instance_type: c3.8xlarge
        image: ami-61bbf104
        region: us-east-1
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        group_id: "{{ security_group_id }}"
        wait: yes
      register: ec2_result
    - name: Add instances to appropriate $group in inventory
      add_host: hostname={{ item.public_ip }} groups={{ role }} private_ip={{ item.private_ip }} private_dns={{ item.private_dns_name }}
      with_items: ec2_result.instances
    - name: Wait for ssh to come up
      local_action: wait_for host={{ item.public_ip }}
                    state=started
                    port=22 timeout=300
      sudo: false
      with_items: ec2_result.instances
    - name: Wait for ssh key to be in place...
      pause: seconds=30

- hosts: "{{ role }}"
  remote_user: centos
  sudo: yes
#  roles:
#    - ooni_common # monitoring, logging, etc.
  tasks:
    - name: Copy over the shell scripts and templates
      copy: src=./{{ role }} dest=/home/centos/ops
    - name: Make install.sh executable
      file: path=/home/centos/ops/{{ role }}/install.sh mode="u+x"
    - name: Run the install script on the remote server
      shell: /home/centos/ops/{{ role }}/install.sh
      environment:
        postgres_host: "{{ postgres_host }}"
        postgres_password: "{{ postgres_password }}"
        aws_key_id: "{{ aws_key_id }}"
        aws_key: "{{ aws_key }}"

